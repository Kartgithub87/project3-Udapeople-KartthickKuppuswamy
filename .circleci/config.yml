
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #  parameters:
          # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
             aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
             exit 1

jobs:
  build-frontend:
  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build Front End"
          command: |
            cd frontend
            npm install
            npm init -y
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend           


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Build Back End"
          command: |
            cd backend
            npm install
            npm init -y
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend      
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      - run: 
          name: Front End test
          command: |
            cd frontend
            npm install
            npm init -y
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run: 
          name: Back End test
          command: |
            cd backend
            npm install
            npm init -y
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      - run: 
          name: scanning front end
          command: |
            cd frontend
            npm install
            npm init -y
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run: 
          name: scanning backend end
          command: |
            cd backend
            npm install
            npm init -y
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
  #   - run:
  #        name: Ensure back-end infrastructure exists
  #        command: |
  #          aws cloudformation deploy \
  #            --template-file .circleci/files/backend.yml \
  #            --tags project=udapeople \
  #            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

  #    - run:
  #       name: Ensure front-end infrastructure exist
  #        command: |
  #          aws cloudformation deploy \
  #            --template-file .circleci/files/frontend.yml \
  #            --tags project=udapeople \
  #            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"         

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --filters 'Name=tag:Name,Values=backend-*' \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt       
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk update pip3
            pip3 install 
            awscli 
      - attach_workspace:
          at:  ~/ 
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - add_ssh_keys:
          fingerprints: ["11:9d:2f:35:98:61:90:ec:05:0b:81:8e:b0:56:5b:ba"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -vvvv -i ~/project/.circleci/ansible/inventory.txt  -c ssh configure-server.yml

            

workflows:
  say-hello-workflow:
    jobs:
  #    - build-frontend
  #    - build-backend
  #    - test-frontend:
  #        requires: [build-frontend]
  #    - test-backend:
  #        requires: [build-backend]   
  #    - scan-frontend:
  #        requires: [build-frontend]
  #    - scan-backend:
  #        requires: [build-backend]     
       - deploy-infrastructure
       - configure-infrastructure 