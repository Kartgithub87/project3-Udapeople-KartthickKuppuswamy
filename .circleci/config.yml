
version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name upapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              
  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert Migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/S8hac9Q9FFGXxFTk9dqAM6/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            exit 1
            fi
            echo "executed it as success is not 1"
jobs:
  build-frontend:
  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build Front End"
          command: |
            cd frontend
            npm install
            npm init -y
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend           


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Build Back End"
          command: |
            cd backend
            npm install
            npm init -y
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend      
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      - run: 
          name: Front End test
          command: |
            cd frontend
            npm install
            npm init -y
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run: 
          name: Back End test
          command: |
            cd backend
            npm install
            npm init -y
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend]
      - run: 
          name: scanning front end
          command: |
            cd frontend
            npm install
            npm init -y
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run: 
          name: scanning backend end
          command: |
            cd backend
            npm install
            npm init -y
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
             --tags project=udapeople \
             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
             --tags project=udapeople \
             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"         

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            export BACKEND_SERVER_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "backend_serverIP = ${BACKEND_SERVER_IP}"
            echo ${BACKEND_SERVER_IP} >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
              
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk update pip3
            pip3 install awscli
      - attach_workspace:
          at:  ~/ 
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - add_ssh_keys:
          fingerprints: ["11:9d:2f:35:98:61:90:ec:05:0b:81:8e:b0:56:5b:ba"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: | 
            cd ~/project/.circleci/ansible
            ansible-playbook -vvvv -i ~/project/.circleci/ansible/inventory.txt  configure-server.yml 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  run-migrations:
    docker:
      - image: cimg/node:18.2.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migrations_dump.txt

      - attach_workspace:
          at: ~/
      - run: cat ~/project/backend/migrations_dump.txt

      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             curl https://kvdb.io/S8hac9Q9FFGXxFTk9dqAM6/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       
  

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk add --update --no-cache nodejs npm
            apk update pip3
            pip3 install awscli
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm init -y
            npm run build
            npm run test
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
         
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk add --update --no-cache nodejs npm
            apk update pip3
            pip3 install awscli

      - add_ssh_keys:
          fingerprints: ["11:9d:2f:35:98:61:90:ec:05:0b:81:8e:b0:56:5b:ba"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 		
      - run:
          name: Deploy backend objects
          command: |
            cd backend
            npm i
            npm init -y
            npm run build
            npm run test
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            cd ..
            tar -C backend -czvf artifact.tar.gz .

      - store_artifacts:
          path: ~/project/artifact.tar.gz

      - run:  
          name: invoke ansible script
          command: |
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk update pip3
            pip3 install awscli     

      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text) 
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
            return 0
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |            
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl  -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: update cloud front distribution
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name InitialStack \
             --parameter-overrides WorkflowID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" \
             --tags project=udapeople    
             
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"        

workflows:
  udapeopleflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
         requires: [build-backend]   
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]     
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
         requires: [configure-infrastructure]     
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
         requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]         